/*
const lines = {
  N: { stations: ["Times Square", "34th", "28th", "23rd", "Union Square", "8th"], stationsReversed: function() {return this.stations.slice().reverse()}},
  L: { stations: ["8th", "6th", "Union Square", "3rd", "1st"], stationsReversed: function() {return this.stations.slice().reverse()} },
  6: { stations: ["Grand Central", "33rd", "28th", "23rd", "Union Square", "Astor Place"], stationsReversed: function() {return this.stations.slice().reverse()} }
};
const isReversed = (startIndex, endIndex) => startIndex > endIndex;
const getStationIndex = (line, station) => lines[line].stations.indexOf(station);
const displayTrip = (totalStops, lineStart, initialStops, lastStops = []) => {
  console.log([
      `You must travel through the following stops on the ${lineStart} line: ${initialStops.join(", ")}`,
      `${lastStops.length > 0 ? "Change at Union Square" : ""}`,
      `${lastStops.length > 0 ? "Your journey continues through the following stops: " + lastStops.join(", ") : ""}`,
      `${totalStops} stops in total.`
    ].filter(text => text).join("\r\n"));
};
const stops = (line, startIndex, endIndex) => (isReversed(startIndex, endIndex) ? lines[line].stationsReversed() : lines[line].stations).filter((station, index) => station && index > startIndex && index <= endIndex);
const planTrip = (lineStart, stationStart, lineEnd, stationEnd) => displayTrip(
  stops(lineStart, getStationIndex(lineStart, stationStart), getStationIndex(lineStart, "Union Square")).length + (stops(lineEnd, getStationIndex(lineEnd, stationEnd), getStationIndex(lineEnd, "Union Square")).length || 0), // totalStops
  lineStart,
  stops(lineStart, getStationIndex(lineStart, stationStart), getStationIndex(lineStart, "Union Square")), // initialStops
  stops(lineEnd, getStationIndex(lineEnd, stationEnd), getStationIndex(lineEnd, "Union Square")) // lastStops
);
*/

const lines = { N: { stations: ["Times Square", "34th", "28th", "23rd", "Union Square", "8th"], stationsReversed: function() {return this.stations.slice().reverse()}}, L: { stations: ["8th", "6th", "Union Square", "3rd", "1st"], stationsReversed: function() {return this.stations.slice().reverse()} }, 6: { stations: ["Grand Central", "33rd", "28th", "23rd", "Union Square", "Astor Place"], stationsReversed: function() {return this.stations.slice().reverse()} }};
const isReversed = (startIndex, endIndex) => startIndex > endIndex;
const getStationIndex = (line, station) => lines[line].stations.indexOf(station);
const displayTrip = (totalStops, lineStart, initialStops, lastStops = []) => { console.log([`You must travel through the following stops on the ${lineStart} line: ${initialStops.join(", ")}`,`${lastStops.length > 0 ? "Change at Union Square" : ""}`,`${lastStops.length > 0 ? "Your journey continues through the following stops: " + lastStops.join(", ") : ""}`,`${totalStops} stops in total.`].filter(text => text).join("\r\n")); };
const stops = (line, startIndex, endIndex) => (isReversed(startIndex, endIndex) ? lines[line].stationsReversed() : lines[line].stations).filter((station, index) => station && index > startIndex && index <= endIndex);
const planTrip = (lineStart, stationStart, lineEnd, stationEnd) => displayTrip( stops(lineStart, getStationIndex(lineStart, stationStart), getStationIndex(lineStart, "Union Square")).length + (stops(lineEnd, getStationIndex(lineEnd, stationEnd), getStationIndex(lineEnd, "Union Square")).length || 0),  lineStart, stops(lineStart, getStationIndex(lineStart, stationStart), getStationIndex(lineStart, "Union Square")), stops(lineEnd, getStationIndex(lineEnd, stationEnd), getStationIndex(lineEnd, "Union Square")));

// TESTS

planTrip("N", "Times Square", "N", "8th");
planTrip("N", "Times Square", "6", "33rd");
